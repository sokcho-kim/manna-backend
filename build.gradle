buildscript {
    ext {
        springBootVersion = '2.4.5'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    compile("com.querydsl:querydsl-core")
    compile("com.querydsl:querydsl-jpa")
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
//    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
//    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-oauth2'
    runtimeOnly group: 'com.h2database', name: 'h2', version: '1.4.200'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

}

test {
    useJUnitPlatform()
}

def generated = "src/main/generated"

sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}